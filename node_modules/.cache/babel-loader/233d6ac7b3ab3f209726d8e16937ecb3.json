{"ast":null,"code":"import _objectWithoutProperties from \"/Users/fernandocamargodelbuono/_dev/odywalia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/fernandocamargodelbuono/_dev/odywalia/src/components/fields/checkbox/index.js\";\nimport React, { useCallback, useMemo } from 'react';\nimport { Checkbox as Input, FormControlLabel } from '@material-ui/core';\n\nconst Item = ({\n  label\n}) => /*#__PURE__*/React.createElement(FormControlLabel, {\n  control: /*#__PURE__*/React.createElement(Input, {\n    checked: false,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 14\n    }\n  }),\n  label: label,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }\n}); // const Checkbox = ({ onChange: change, label, value, options }) => {\n\n\nconst Checkbox = (_ref) => {\n  let options = _ref.options,\n      props = _objectWithoutProperties(_ref, [\"options\"]);\n\n  /*\n  const checked = useMemo(() => !!value, [value]);\n  const onChange = useCallback(({ target: { checked } }) => change(checked), [\n    change,\n  ]);\n   return (\n    <FormControlLabel\n      control={<Input checked={checked} onChange={onChange} color=\"primary\" />}\n      label={label}\n    />\n  );\n  const items = useMemo(() => options || [{ label, value }], [\n    options,\n    label,\n    value,\n  ]);\n  const renderItem = useCallback(\n    (item, index) => <Item key={index} {...item} />,\n    []\n  );\n   return items.map(renderItem);\n  */\n  const isChecked = useCallback(() => {}, []);\n  const renderOption = useCallback(({\n    label\n  }, index) => {\n    return /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: index,\n      control: /*#__PURE__*/React.createElement(Input, {\n        checked: false,\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 18\n        }\n      }),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    });\n  }, []);\n  return options ? options.map(renderOption) : null;\n};\n\nCheckbox.propTypes = {};\nCheckbox.defaultProps = {};\nexport default Checkbox;","map":{"version":3,"sources":["/Users/fernandocamargodelbuono/_dev/odywalia/src/components/fields/checkbox/index.js"],"names":["React","useCallback","useMemo","Checkbox","Input","FormControlLabel","Item","label","options","props","isChecked","renderOption","index","map","propTypes","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,QAAQ,IAAIC,KAArB,EAA4BC,gBAA5B,QAAoD,mBAApD;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACX,oBAAC,gBAAD;AACE,EAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,KAAhB;AAAuB,IAAA,KAAK,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX;AAEE,EAAA,KAAK,EAAEA,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,C,CAOA;;;AACA,MAAMJ,QAAQ,GAAG,UAA2B;AAAA,MAAxBK,OAAwB,QAAxBA,OAAwB;AAAA,MAAZC,KAAY;;AAC1C;;;;;;;;;;;;;;;;;;;;;;AAyBA,QAAMC,SAAS,GAAGT,WAAW,CAAC,MAAM,CAAE,CAAT,EAAW,EAAX,CAA7B;AACA,QAAMU,YAAY,GAAGV,WAAW,CAAC,CAAC;AAAEM,IAAAA;AAAF,GAAD,EAAYK,KAAZ,KAAsB;AACrD,wBACE,oBAAC,gBAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAE,KAAhB;AAAuB,QAAA,KAAK,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFX;AAGE,MAAA,KAAK,EAAEL,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GAR+B,EAQ7B,EAR6B,CAAhC;AAUA,SAAOC,OAAO,GAAGA,OAAO,CAACK,GAAR,CAAYF,YAAZ,CAAH,GAA+B,IAA7C;AACD,CAtCD;;AAwCAR,QAAQ,CAACW,SAAT,GAAqB,EAArB;AAEAX,QAAQ,CAACY,YAAT,GAAwB,EAAxB;AAEA,eAAeZ,QAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { Checkbox as Input, FormControlLabel } from '@material-ui/core';\n\nconst Item = ({ label }) => (\n  <FormControlLabel\n    control={<Input checked={false} color=\"primary\" />}\n    label={label}\n  />\n);\n\n// const Checkbox = ({ onChange: change, label, value, options }) => {\nconst Checkbox = ({ options, ...props }) => {\n  /*\n  const checked = useMemo(() => !!value, [value]);\n  const onChange = useCallback(({ target: { checked } }) => change(checked), [\n    change,\n  ]);\n\n  return (\n    <FormControlLabel\n      control={<Input checked={checked} onChange={onChange} color=\"primary\" />}\n      label={label}\n    />\n  );\n  const items = useMemo(() => options || [{ label, value }], [\n    options,\n    label,\n    value,\n  ]);\n  const renderItem = useCallback(\n    (item, index) => <Item key={index} {...item} />,\n    []\n  );\n\n  return items.map(renderItem);\n  */\n\n  const isChecked = useCallback(() => {}, []);\n  const renderOption = useCallback(({ label }, index) => {\n    return (\n      <FormControlLabel\n        key={index}\n        control={<Input checked={false} color=\"primary\" />}\n        label={label}\n      />\n    );\n  }, []);\n\n  return options ? options.map(renderOption) : null;\n};\n\nCheckbox.propTypes = {};\n\nCheckbox.defaultProps = {};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/fernandocamargodelbuono/_dev/odywalia/src/components/fields/checkbox/index.js\";\nimport castArray from 'lodash/castArray';\nimport isEqual from 'lodash/isEqual';\nimport React, { useCallback, useMemo } from 'react';\nimport { Checkbox as Input, FormControlLabel } from '@material-ui/core';\n\nconst Option = ({\n  label,\n  value,\n  isChecked\n}) => {\n  const checked = useMemo(() => isChecked(value), [isChecked, value]);\n  const onChange = useCallback(({\n    target: {\n      checked\n    }\n  }) => console.log({\n    checked\n  }), []);\n  return /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Input, {\n      checked: checked,\n      onChange: onChange,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 16\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  });\n};\n\nconst Checkbox = ({\n  value: defaultValue,\n  options\n}) => {\n  const isChecked = useCallback(option => !!castArray(defaultValue).filter(item => isEqual(item, option)).length, [defaultValue]);\n  const check = useCallback(() => {}, []);\n  const uncheck = useCallback(() => {}, []);\n  const renderOption = useCallback((item, index) => {\n    return /*#__PURE__*/React.createElement(Option, Object.assign({\n      key: index\n    }, item, {\n      isChecked: isChecked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }\n    }));\n  }, [isChecked]);\n  return options ? options.map(renderOption) : null;\n};\n\nCheckbox.propTypes = {};\nCheckbox.defaultProps = {};\nexport default Checkbox;","map":{"version":3,"sources":["/Users/fernandocamargodelbuono/_dev/odywalia/src/components/fields/checkbox/index.js"],"names":["castArray","isEqual","React","useCallback","useMemo","Checkbox","Input","FormControlLabel","Option","label","value","isChecked","checked","onChange","target","console","log","defaultValue","options","option","filter","item","length","check","uncheck","renderOption","index","map","propTypes","defaultProps"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,QAAQ,IAAIC,KAArB,EAA4BC,gBAA5B,QAAoD,mBAApD;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAD,KAAiC;AAC9C,QAAMC,OAAO,GAAGR,OAAO,CAAC,MAAMO,SAAS,CAACD,KAAD,CAAhB,EAAyB,CAACC,SAAD,EAAYD,KAAZ,CAAzB,CAAvB;AACA,QAAMG,QAAQ,GAAGV,WAAW,CAC1B,CAAC;AAAEW,IAAAA,MAAM,EAAE;AAAEF,MAAAA;AAAF;AAAV,GAAD,KAA6BG,OAAO,CAACC,GAAR,CAAY;AAAEJ,IAAAA;AAAF,GAAZ,CADH,EAE1B,EAF0B,CAA5B;AAKA,sBACE,oBAAC,gBAAD;AACE,IAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAEA,OAAhB;AAAyB,MAAA,QAAQ,EAAEC,QAAnC;AAA6C,MAAA,KAAK,EAAC,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADX;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD,CAbD;;AAeA,MAAMJ,QAAQ,GAAG,CAAC;AAAEK,EAAAA,KAAK,EAAEO,YAAT;AAAuBC,EAAAA;AAAvB,CAAD,KAAsC;AACrD,QAAMP,SAAS,GAAGR,WAAW,CAC3BgB,MAAM,IACJ,CAAC,CAACnB,SAAS,CAACiB,YAAD,CAAT,CAAwBG,MAAxB,CAA+BC,IAAI,IAAIpB,OAAO,CAACoB,IAAD,EAAOF,MAAP,CAA9C,EAA8DG,MAFvC,EAG3B,CAACL,YAAD,CAH2B,CAA7B;AAKA,QAAMM,KAAK,GAAGpB,WAAW,CAAC,MAAM,CAAE,CAAT,EAAW,EAAX,CAAzB;AACA,QAAMqB,OAAO,GAAGrB,WAAW,CAAC,MAAM,CAAE,CAAT,EAAW,EAAX,CAA3B;AACA,QAAMsB,YAAY,GAAGtB,WAAW,CAC9B,CAACkB,IAAD,EAAOK,KAAP,KAAiB;AACf,wBAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA;AAAb,OAAwBL,IAAxB;AAA8B,MAAA,SAAS,EAAEV,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAH6B,EAI9B,CAACA,SAAD,CAJ8B,CAAhC;AAOA,SAAOO,OAAO,GAAGA,OAAO,CAACS,GAAR,CAAYF,YAAZ,CAAH,GAA+B,IAA7C;AACD,CAhBD;;AAkBApB,QAAQ,CAACuB,SAAT,GAAqB,EAArB;AAEAvB,QAAQ,CAACwB,YAAT,GAAwB,EAAxB;AAEA,eAAexB,QAAf","sourcesContent":["import castArray from 'lodash/castArray';\nimport isEqual from 'lodash/isEqual';\nimport React, { useCallback, useMemo } from 'react';\nimport { Checkbox as Input, FormControlLabel } from '@material-ui/core';\n\nconst Option = ({ label, value, isChecked }) => {\n  const checked = useMemo(() => isChecked(value), [isChecked, value]);\n  const onChange = useCallback(\n    ({ target: { checked } }) => console.log({ checked }),\n    []\n  );\n\n  return (\n    <FormControlLabel\n      control={<Input checked={checked} onChange={onChange} color=\"primary\" />}\n      label={label}\n    />\n  );\n};\n\nconst Checkbox = ({ value: defaultValue, options }) => {\n  const isChecked = useCallback(\n    option =>\n      !!castArray(defaultValue).filter(item => isEqual(item, option)).length,\n    [defaultValue]\n  );\n  const check = useCallback(() => {}, []);\n  const uncheck = useCallback(() => {}, []);\n  const renderOption = useCallback(\n    (item, index) => {\n      return <Option key={index} {...item} isChecked={isChecked} />;\n    },\n    [isChecked]\n  );\n\n  return options ? options.map(renderOption) : null;\n};\n\nCheckbox.propTypes = {};\n\nCheckbox.defaultProps = {};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}
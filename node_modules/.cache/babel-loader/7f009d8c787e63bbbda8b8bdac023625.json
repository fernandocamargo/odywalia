{"ast":null,"code":"var _jsxFileName = \"/Users/fernandocamargodelbuono/_dev/odywalia/src/components/fields/checkbox/index.js\";\nimport find from 'lodash/find';\nimport isEqual from 'lodash/isEqual';\nimport React, { useCallback, useMemo } from 'react';\nimport { Checkbox as Input, FormControlLabel } from '@material-ui/core';\n\nconst Option = ({\n  label,\n  value,\n  isChecked\n}) => {\n  const checked = useMemo(() => isChecked(value), [isChecked, value]);\n  console.log({\n    value,\n    checked\n  });\n  return /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Input, {\n      checked: checked,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 16\n      }\n    }),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  });\n}; // const Checkbox = ({ onChange: change, label, value, options }) => {\n\n\nconst Checkbox = ({\n  value,\n  options\n}) => {\n  /*\n  const checked = useMemo(() => !!value, [value]);\n  const onChange = useCallback(({ target: { checked } }) => change(checked), [\n    change,\n  ]);\n   return (\n    <FormControlLabel\n      control={<Input checked={checked} onChange={onChange} color=\"primary\" />}\n      label={label}\n    />\n  );\n  const items = useMemo(() => options || [{ label, value }], [\n    options,\n    label,\n    value,\n  ]);\n  const renderItem = useCallback(\n    (item, index) => <Item key={index} {...item} />,\n    []\n  );\n   return items.map(renderItem);\n  */\n  const isChecked = useCallback(option => Array.isArray(value) ? find(value, option) : isEqual(option, value), [value]);\n  const renderOption = useCallback((item, index) => {\n    return /*#__PURE__*/React.createElement(Option, Object.assign({\n      key: index\n    }, item, {\n      isChecked: isChecked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }));\n  }, [isChecked]);\n  return options ? options.map(renderOption) : null;\n};\n\nCheckbox.propTypes = {};\nCheckbox.defaultProps = {};\nexport default Checkbox;","map":{"version":3,"sources":["/Users/fernandocamargodelbuono/_dev/odywalia/src/components/fields/checkbox/index.js"],"names":["find","isEqual","React","useCallback","useMemo","Checkbox","Input","FormControlLabel","Option","label","value","isChecked","checked","console","log","options","option","Array","isArray","renderOption","item","index","map","propTypes","defaultProps"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,QAAQ,IAAIC,KAArB,EAA4BC,gBAA5B,QAAoD,mBAApD;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAD,KAAiC;AAC9C,QAAMC,OAAO,GAAGR,OAAO,CAAC,MAAMO,SAAS,CAACD,KAAD,CAAhB,EAAyB,CAACC,SAAD,EAAYD,KAAZ,CAAzB,CAAvB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAZ;AAEA,sBACE,oBAAC,gBAAD;AACE,IAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAEA,OAAhB;AAAyB,MAAA,KAAK,EAAC,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADX;AAEE,IAAA,KAAK,EAAEH,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD,CAXD,C,CAaA;;;AACA,MAAMJ,QAAQ,GAAG,CAAC;AAAEK,EAAAA,KAAF;AAASK,EAAAA;AAAT,CAAD,KAAwB;AACvC;;;;;;;;;;;;;;;;;;;;;;AAyBA,QAAMJ,SAAS,GAAGR,WAAW,CAC3Ba,MAAM,IACJC,KAAK,CAACC,OAAN,CAAcR,KAAd,IAAuBV,IAAI,CAACU,KAAD,EAAQM,MAAR,CAA3B,GAA6Cf,OAAO,CAACe,MAAD,EAASN,KAAT,CAF3B,EAG3B,CAACA,KAAD,CAH2B,CAA7B;AAKA,QAAMS,YAAY,GAAGhB,WAAW,CAC9B,CAACiB,IAAD,EAAOC,KAAP,KAAiB;AACf,wBAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA;AAAb,OAAwBD,IAAxB;AAA8B,MAAA,SAAS,EAAET,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAH6B,EAI9B,CAACA,SAAD,CAJ8B,CAAhC;AAOA,SAAOI,OAAO,GAAGA,OAAO,CAACO,GAAR,CAAYH,YAAZ,CAAH,GAA+B,IAA7C;AACD,CAvCD;;AAyCAd,QAAQ,CAACkB,SAAT,GAAqB,EAArB;AAEAlB,QAAQ,CAACmB,YAAT,GAAwB,EAAxB;AAEA,eAAenB,QAAf","sourcesContent":["import find from 'lodash/find';\nimport isEqual from 'lodash/isEqual';\nimport React, { useCallback, useMemo } from 'react';\nimport { Checkbox as Input, FormControlLabel } from '@material-ui/core';\n\nconst Option = ({ label, value, isChecked }) => {\n  const checked = useMemo(() => isChecked(value), [isChecked, value]);\n\n  console.log({ value, checked });\n\n  return (\n    <FormControlLabel\n      control={<Input checked={checked} color=\"primary\" />}\n      label={label}\n    />\n  );\n};\n\n// const Checkbox = ({ onChange: change, label, value, options }) => {\nconst Checkbox = ({ value, options }) => {\n  /*\n  const checked = useMemo(() => !!value, [value]);\n  const onChange = useCallback(({ target: { checked } }) => change(checked), [\n    change,\n  ]);\n\n  return (\n    <FormControlLabel\n      control={<Input checked={checked} onChange={onChange} color=\"primary\" />}\n      label={label}\n    />\n  );\n  const items = useMemo(() => options || [{ label, value }], [\n    options,\n    label,\n    value,\n  ]);\n  const renderItem = useCallback(\n    (item, index) => <Item key={index} {...item} />,\n    []\n  );\n\n  return items.map(renderItem);\n  */\n\n  const isChecked = useCallback(\n    option =>\n      Array.isArray(value) ? find(value, option) : isEqual(option, value),\n    [value]\n  );\n  const renderOption = useCallback(\n    (item, index) => {\n      return <Option key={index} {...item} isChecked={isChecked} />;\n    },\n    [isChecked]\n  );\n\n  return options ? options.map(renderOption) : null;\n};\n\nCheckbox.propTypes = {};\n\nCheckbox.defaultProps = {};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}